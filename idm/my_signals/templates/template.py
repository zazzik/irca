import re
import time
from typing import Tuple, Union

from idm.utils import att_parse
from idm.objects import dp, SignalEvent


def delete_template(name: str, templates: list) -> Tuple[list, bool]:
    for template in templates:
        if template['name'] == name:
            templates.remove(template)
            return templates, True
    return templates, False

@dp.signal_event_register('+—à–∞–±')
@dp.longpoll_event_register('+—à–∞–±')
def template_create(event: SignalEvent) -> str:
    name = re.findall(r"([^|]+)\|?([^|]*)", ' '.join(event.args))
    if not name:
        event.msg_op(2, "‚ùó –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return "ok"
    category = name[0][1].lower().strip() or '–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
    name = name[0][0].lower().strip()

    if category == '–≤—Å–µ':
        event.msg_op(2, '‚ùó –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π "–≤—Å–µ"')
        return "ok"

    if not (event.payload or event.attachments or event.reply_message):
        event.msg_op(2, "‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return "ok"

    if event.reply_message:
        data = event.reply_message['text']
        event.attachments = att_parse(event.reply_message['attachments'])
        if event.attachments:
            if event.attachments[0].startswith('audio_message'):
                event.msg_op(2, '‚ö†Ô∏è –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ì–° –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É "+–≥—Å"')
                return "ok"
    else:
        data = event.payload

    event.db.templates, exist = delete_template(name, event.db.templates)
    event.db.templates.append({
        "name": name,
        "payload": data,
        "cat": category,
        "attachments": event.attachments
    })
    event.db.save()

    event.msg_op(2, f'‚úÖ –®–∞–±–ª–æ–Ω "{name}" ' +
                 ("–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω" if exist else "—Å–æ—Ö—Ä–∞–Ω–µ–Ω"), delete=2)
    return "ok"

@dp.signal_event_register('—à–∞–±—ã')
@dp.longpoll_event_register('—à–∞–±—ã')
def template_list(event: SignalEvent) -> str:
    category = ' '.join(event.args).lower()
    templates = event.db.templates
    if category == '–≤—Å–µ':
        message = 'üìÉ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤:'
        for i, t in enumerate(templates, 1):
            message += f"\n{i}. {t['name']} | {t['cat']}"
    elif not category:
        cats = {}
        for t in templates:
            cats[t['cat']] = cats.get(t['cat'], 0) + 1
        message = "üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤:"
        for cat in cats:
            message += f"\n-- {cat} ({cats[cat]})"
    else:
        message = f'üìñ –®–∞–±–ª–æ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}":'
        for t in templates:
            if t['cat'] == category:
                message += f"\n-- {t['name']}"
    if '\n' not in message:
        if templates == []:
            message = 'üëÄ –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞... –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É "+—à–∞–±"'  # noqa
        else:
            message = '‚ö†Ô∏è –®–∞–±–ª–æ–Ω—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
    event.msg_op(2, message)
    return "ok"


def get_name(event: SignalEvent) -> Union[str]:
    return event, ' '.join(event.args).lower()

@dp.signal_event_register('-—à–∞–±')
@dp.longpoll_event_register('-—à–∞–±')
@dp.wrap_handler(get_name)
def template_delete(event: SignalEvent, name: str) -> str:
    event.db.templates, exist = delete_template(name, event.db.templates)
    if exist:
        msg = f'‚úÖ –®–∞–±–ª–æ–Ω "{name}" —É–¥–∞–ª–µ–Ω'
        event.db.save()
    else:
        msg = f'‚ö†Ô∏è –®–∞–±–ª–æ–Ω "{name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'
    event.msg_op(2, msg, delete=1)
    return "ok"

@dp.signal_event_register('—à–∞–±')
@dp.longpoll_event_register('—à–∞–±')
@dp.wrap_handler(get_name)
def template_show(event: SignalEvent, name: str) -> str:
    template = None
    for temp in event.db.templates:
        if temp['name'] == name:
            template = temp
            break
    if template:
        atts = template['attachments']
        atts.extend(event.attachments)
        event.msg_op(2, temp['payload'] + '\n' + event.payload,
                     keep_forward_messages=1, attachment=','.join(atts))
    else:
        event.msg_op(2, f'‚ùó –®–∞–±–ª–æ–Ω "{name}" –Ω–µ –Ω–∞–π–¥–µ–Ω')
    return "ok"
